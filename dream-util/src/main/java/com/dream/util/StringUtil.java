package com.dream.util;import java.util.HashMap;import java.util.List;import java.util.Map;import java.util.Random;import java.util.regex.Matcher;import java.util.regex.Pattern;public class StringUtil {    private static final String LICENSE_PLATE_PATTERN = "([京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼]{1}(([A-HJ-Z]{1}[A-HJ-NP-Z0-9]{5})|([A-HJ-Z]{1}(([DF]{1}[A-HJ-NP-Z0-9]{1}[0-9]{4})|([0-9]{5}[DF]{1})))|([A-HJ-Z]{1}[A-D0-9]{1}[0-9]{3}警)))|([0-9]{6}使)|((([沪粤川云桂鄂陕蒙藏黑辽渝]{1}A)|鲁B|闽D|蒙E|蒙H)[0-9]{4}领)|(WJ[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼]{1}[0-9]{4}[TDSHBXJ0-9]{1})|([VKHBSLJNGCE]{1}[A-DJ-PR-TVY]{1}[0-9]{5})";    public static boolean isHaveChinese(String str) {        String regEx = "[\\u4e00-\\u9fa5]";        Pattern p = Pattern.compile(regEx);        Matcher m = p.matcher(str);//        while (m.find()) {            return false;        }        return true;    }    private static String toHexUtil(int n) {        String rt = "";        switch (n) {            case 10:                rt += "A";                break;            case 11:                rt += "B";                break;            case 12:                rt += "C";                break;            case 13:                rt += "D";                break;            case 14:                rt += "E";                break;            case 15:                rt += "F";                break;            default:                rt += n;        }        return rt;    }    public static String toHex(int n) {        StringBuilder sb = new StringBuilder();        if (n / 16 == 0) {            return toHexUtil(n);        } else {            String t = toHex(n / 16);            int nn = n % 16;            sb.append(t).append(toHexUtil(nn));        }        return sb.toString();    }    public static String parseAscii(String str) {        StringBuilder sb = new StringBuilder();        byte[] bs = str.getBytes();        for (int i = 0; i < bs.length; i++)            sb.append(toHex(bs[i]));        return sb.toString();    }    /**     * 获取N位随机的短信验证码     *     * @param length 要返回的随机码长度     * @return 返回计算的随机码     */    public static String GetMessageCheckCode(final int length) {        Random r = new Random();        while (true) {            int x = r.nextInt(9999);            if (x > 999) {                return String.valueOf(x);            } else                continue;        }    }    /**     * @param str     * @return     */    public static byte[] hex2byte(String str) {        if (str == null) {            return null;        }        str = str.trim();        int len = str.length();        if (len == 0 || len % 2 == 1) {            return null;        }        byte[] b = new byte[len / 2];        try {            for (int i = 0; i < str.length(); i += 2) {                b[i / 2] = (byte) Integer                        .decode("0X" + str.substring(i, i + 2)).intValue();            }            return b;        } catch (Exception e) {            return null;        }    }    /**     * 将byte转换成16位格式的字符串     *     * @param src     * @return     */    public static String bytesToHexString(byte[] src) {        StringBuilder stringBuilder = new StringBuilder("");        if (src == null || src.length <= 0) {            return null;        }        for (int i = 0; i < src.length; i++) {            int v = src[i] & 0xFF;            String hv = Integer.toHexString(v);            if (hv.length() < 2) {                stringBuilder.append(0);            }            stringBuilder.append(hv);        }        return stringBuilder.toString();    }    /**     * 校验字符串是否为NULL 或者 LENGTH=0     *     * @param input     * @return     */    public static boolean IsNullOrEmpty(String input) {        return input == null || input.length() == 0;    }    /**     * 如果字符串是NULL则返回空串，以免对象引用时出错     *     * @param input     * @return     */    public static String NullOrEmpty(Object input, String initialValue) {        if (input instanceof Integer)            return input.toString();        if (IsNullOrEmpty((String) input))            return initialValue;        else            return String.valueOf(input);    }    public static String randomString(int length) {        if (length < 1) {            return null;        }        Random randGen = null;        char[] numbersAndLetters = null;        if (randGen == null) {            randGen = new Random();            numbersAndLetters = ("0123456789abcdefghijklmnopqrstuvwxyz" +                    "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ").toCharArray();        }        char[] randBuffer = new char[length];        for (int i = 0; i < randBuffer.length; i++) {            randBuffer[i] = numbersAndLetters[randGen.nextInt(71)];        }        return new String(randBuffer);    }    /**     * 二维码转MAP     *     * @param encode     * @return     */    public static Map<String, String> encodeToMap(String encode) {        String[] bbb = encode.split("&");        List<String> list = java.util.Arrays.asList(bbb);        Map<String, String> jmap = new HashMap<String, String>();        for (String ccc : list) {            String _key = ccc.split("=")[0];            String _value = ccc.split("=")[1];            jmap.put(_key, _value);        }        return jmap;    }    /**     * 车牌号校验     * @return     */    public static boolean verifyLicensePlate(String licensePlate){        Pattern pattern = Pattern.compile(LICENSE_PLATE_PATTERN);        Matcher matcher = pattern.matcher(licensePlate);        if (!matcher.matches()) {            return false;        }        return true;    }}